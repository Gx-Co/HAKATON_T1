
import paramiko
import requests
from bs4 import BeautifulSoup

class SimpleSSHAuth:
    def __init__(self, ssh_host, ssh_port, ssh_user, ssh_pass, url, site_user, site_pass):
        self.ssh_host = ssh_host
        self.ssh_port = ssh_port
        self.ssh_user = ssh_user
        self.ssh_pass = ssh_pass
        self.url = url
        self.site_user = site_user
        self.site_pass = site_pass
        self.ssh = None
        self.session = requests.Session()
    
    def connect_ssh(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VM –ø–æ SSH"""
        try:
            self.ssh = paramiko.SSHClient()
            self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            self.ssh.connect(self.ssh_host, self.ssh_port, self.ssh_user, self.ssh_pass, timeout=10)
            print("‚úÖ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ SSH: {e}")
            return False
    
    def run_ssh_command(self, command):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ VM"""
        try:
            stdin, stdout, stderr = self.ssh.exec_command(command)
            output = stdout.read().decode()
            error = stderr.read().decode()
            if output:
                print(f"üìã Output: {output.strip()}")
            if error:
                print(f"‚ö†Ô∏è Error: {error.strip()}")
            return output
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {e}")
            return ""
    
    def website_login(self):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
            response = self.session.get("http://10.0.1.106", headers={"Host": "dvwa.local"})
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # –ò—â–µ–º —Ñ–æ—Ä–º—É
            form = soup.find('form')
            if not form:
                print("‚ùå –§–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
            
            # –ò—â–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
            username_field = None
            password_field = None
            
            for input_tag in form.find_all('input'):
                input_type = input_tag.get('type', '').lower()
                name = input_tag.get('name', '').lower()
                
                if input_type == 'text' or 'user' in name or 'login' in name or 'email' in name:
                    username_field = input_tag.get('name')
                elif input_type == 'password':
                    password_field = input_tag.get('name')
            
            if not username_field or not password_field:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—è –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è")
                return False
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            form_data = {username_field: self.site_user, password_field: self.site_pass}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
            for input_tag in form.find_all('input'):
                name = input_tag.get('name')
                value = input_tag.get('value', '')
                if name and name not in [username_field, password_field]:
                    form_data[name] = value
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
            action = form.get('action', '')
            if action.startswith('/'):
                base_url = '/'.join(self.url.split('/')[:3])
                login_url = base_url + action
            else:
                login_url = self.url
            
            method = form.get('method', 'get').lower()
            
            if method == 'post':
                login_response = self.session.post(login_url, data=form_data)
            else:
                login_response = self.session.get(login_url, params=form_data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if login_response.status_code == 200 and login_response.url != self.url:
                print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ —Å–∞–π—Ç–µ —É—Å–ø–µ—à–Ω–∞")
                return True
            else:
                print("‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        if self.ssh:
            self.ssh.close()
        self.session.close()
        print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã")

def main():
    # === –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ ===
    SSH_HOST = "203.81.208.25"      # IP –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã
    SSH_PORT = 22006                # SSH –ø–æ—Ä—Ç
    SSH_USER = "team06"               # SSH –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    SSH_PASS = "#@~79j0gb2$a"           # SSH –ø–∞—Ä–æ–ª—å
    
    URL = "http://dvwa.local/"  # URL —Å–∞–π—Ç–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    SITE_USER = "admin"             # –õ–æ–≥–∏–Ω –¥–ª—è —Å–∞–π—Ç–∞
    SITE_PASS = "password"          # –ü–∞—Ä–æ–ª—å –¥–ª—è —Å–∞–π—Ç–∞
    # === –ö–û–ù–ï–¶ –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú–´–• –ü–ê–†–ê–ú–ï–¢–†–û–í ===
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º
    ssh_auth = SimpleSSHAuth(SSH_HOST, SSH_PORT, SSH_USER, SSH_PASS, URL, SITE_USER, SITE_PASS)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø–æ SSH
        if ssh_auth.connect_ssh():
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞ VM
            ssh_auth.run_ssh_command("whoami")
            ssh_auth.run_ssh_command("pwd")
            ssh_auth.run_ssh_command("ls -la")
            
            # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –Ω–∞ —Å–∞–π—Ç–µ
            ssh_auth.website_login()
            
    finally:
        # –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        ssh_auth.close()

if __name__ == "__main__":
    main()


def INIT():
    pass

def Request(request):
    return [0, 0]
